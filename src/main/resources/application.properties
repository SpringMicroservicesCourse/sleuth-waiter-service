spring.jpa.hibernate.ddl-auto=none
# 顯示SQL語句及格式化輸出（生產環境避免資訊洩漏，不建議使用
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
# 用来解决 LazyInitializationException: no Session
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# 啟用錯誤響應中的 message 訊息(生產環境避免資訊洩漏，不建議使用)
server.error.include-message=always
server.error.include-binding-errors=always

# 生產環境避免資訊洩漏，不建議使用
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.env.show-values=always
# 確保 Info 端點顯示所有 info.* 屬性，這是 Spring Boot 3.x 的行為，在 Spring Boot 2.x 中不需要這個設定
management.info.env.enabled=true

# 啟用資料庫初始化腳本
# spring.sql.init.mode 有三種模式：
# always  - 每次啟動都執行 schema.sql 和 data.sql（常用於開發環境）
# embedded - 僅針對內嵌資料庫（如 H2、Derby）自動執行初始化腳本
# never   - 不自動執行初始化腳本（適合生產環境）
# 運行過一次後，如果不想清空數據庫就改為 never
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.data-locations=classpath:data.sql

info.app.author=FengQing
info.app.encoding=@project.build.sourceEncoding@

spring.output.ansi.enabled=ALWAYS

server.port=8080

management.tracing.enabled=true
management.tracing.web.enabled=true
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability=1.0

logging.pattern.level=%5p [${spring.zipkin.service.name:${spring.application.name:}},%X{traceId:-},%X{spanId:-}]

spring.datasource.url=jdbc:mariadb://localhost:3306/springbucks
spring.datasource.username=springbucks
spring.datasource.password=springbucks
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

order.discount=95

resilience4j.ratelimiter.instances.coffee.limit-for-period=5
resilience4j.ratelimiter.instances.coffee.limit-refresh-period-in-millis=30000
resilience4j.ratelimiter.instances.coffee.timeout-in-millis=5000
resilience4j.ratelimiter.instances.coffee.subscribe-for-events=true
resilience4j.ratelimiter.instances.coffee.register-health-indicator=true

resilience4j.ratelimiter.instances.order.limit-for-period=3
resilience4j.ratelimiter.instances.order.limit-refresh-period-in-millis=30000
resilience4j.ratelimiter.instances.order.timeout-in-millis=1000
resilience4j.ratelimiter.instances.order.subscribe-for-events=true
resilience4j.ratelimiter.instances.order.register-health-indicator=true

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=spring
spring.rabbitmq.password=spring

# Spring Cloud Stream 函數式編程模型配置
spring.cloud.function.definition=finishedOrders

# 輸入綁定配置 - 接收完成訂單通知
spring.cloud.stream.bindings.finishedOrders-in-0.destination=finishedOrders
spring.cloud.stream.bindings.finishedOrders-in-0.group=waiter-service
spring.cloud.stream.rabbit.bindings.finishedOrders-in-0.consumer.durable-subscription=true
spring.cloud.stream.rabbit.bindings.finishedOrders-in-0.consumer.exchange-name=finishedOrders

# 輸出綁定配置 - 發送新訂單到 Barista
spring.cloud.stream.bindings.newOrders-out-0.destination=newOrders
spring.cloud.stream.rabbit.bindings.newOrders-out-0.producer.delivery-mode=persistent
spring.cloud.stream.rabbit.bindings.newOrders-out-0.producer.exchange-name=newOrders

# 輸出綁定配置 - 通知客戶訂單完成
spring.cloud.stream.bindings.notifyOrders-out-0.destination=notifyOrders
spring.cloud.stream.rabbit.bindings.notifyOrders-out-0.producer.delivery-mode=persistent
spring.cloud.stream.rabbit.bindings.notifyOrders-out-0.producer.exchange-name=notifyOrders
spring.cloud.stream.rabbit.bindings.notifyOrders.producer.routing-key-expression=headers.customer
